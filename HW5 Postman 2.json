{
	"info": {
		"_postman_id": "2547c2aa-9f96-4857-80f8-fe6318c315c4",
		"name": "HW5 Postman 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"string test\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200.\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"var resp_json = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"name check\", function () {\r",
							"    pm.expect(resp_json.name).to.eql(\"John\");\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"age check\", function () {\r",
							"    pm.expect(resp_json.age).to.eql(\"23\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"salary check\", function () {\r",
							"    pm.expect(resp_json.salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"// Спарсить request.\r",
							"var req_json = request.data;\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"req name check\", function () {\r",
							"    pm.expect(resp_json.name).to.eql(req_json.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"req age check\", function () {\r",
							"    pm.expect(resp_json.age).to.eql(req_json.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"req salary check\", function () {\r",
							"    pm.expect(resp_json.salary).to.eql(1*req_json.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(resp_json.family)\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"equal salary check\", function () {\r",
							"    pm.expect(resp_json.family.u_salary_1_5_year).to.eql(4*req_json.salary);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "John",
							"type": "text"
						},
						{
							"key": "age",
							"value": "23",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "John",
							"disabled": true
						},
						{
							"key": "age",
							"value": "23",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "1000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var resp_json = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var req_json = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name check\", function () {\r",
							"    pm.expect(resp_json.name).to.eql(req_json.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age check\", function () {\r",
							"    pm.expect(resp_json.age).to.eql(req_json.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"two salary check\", function () {\r",
							"    pm.expect(resp_json.salary).to.eql(1*req_json.salary);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"console.log(resp_json.family)\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"dog name check\", function () {\r",
							"    pm.expect(resp_json.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog age check\", function () {\r",
							"    pm.expect(resp_json.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"dog check\", function () {\r",
							"    pm.expect(resp_json.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"dog check 2\", function () {\r",
							"    pm.expect(resp_json.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=22&salary=70",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "22"
						},
						{
							"key": "salary",
							"value": "70"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var resp_json = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var req_json = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name check\", function () {\r",
							"    pm.expect(resp_json.name).to.eql(req_json.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(resp_json.age).to.eql(resp_json.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"console.log(\"вывести параметр salary\", req_json.salary)\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"console.log(resp_json.salary)\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(\"вывести 0 параметр\", resp_json.salary[0])\r",
							"\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"вывести 1 параметр\", resp_json.salary[1])\r",
							"\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"вывести 2 параметр\", resp_json.salary[2])\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check salary 0\", function () {\r",
							"    pm.expect(resp_json.salary[0]).to.eql(1*req_json.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check salary 1\", function () {\r",
							"    pm.expect(1*resp_json.salary[1]).to.eql(2*req_json.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"check salary 2\", function () {\r",
							"    pm.expect(1*resp_json.salary[2]).to.eql(3*req_json.salary);\r",
							"});\r",
							"\r",
							"// Создать в окружении переменную name\r",
							"// Создать в окружении переменную age\r",
							"// Создать в окружении переменную salary\r",
							"// Передать в окружение переменную name\r",
							"pm.environment.set(\"name_2\", resp_json.name);\r",
							"\r",
							"// Передать в окружение переменную age\r",
							"pm.environment.set(\"age_2\", resp_json.age);\r",
							"\r",
							"// Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary_2\", resp_json.salary[2]);\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"// for(let i=0; i<resp_json.salary.length; i++) {\r",
							"    // console.log(\"Цикл\", resp_json.salary[i])}\r",
							"\r",
							"    // вариант через FOR - OF для массива\r",
							"for(let item of resp_json.salary) {\r",
							"    console.log(\"Цикл\", item)\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Hank&age=29&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Hank"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Вставить параметр salary из окружения в request\r",
							"// Вставить параметр age из окружения в age\r",
							"// Вставить параметр name из окружения в name\r",
							"// Отправить запрос.\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var resp_json = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"var req_json = request.data;\r",
							"\r",
							"// Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"param start_qa_salary check\", function () {\r",
							"    pm.expect(resp_json).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"param qa_salary_after_6_months check\", function () {\r",
							"    pm.expect(resp_json).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"param qa_salary_after_12_months check\", function () {\r",
							"    pm.expect(resp_json).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"param qa_salary_after_1.5_year check\", function () {\r",
							"    pm.expect(resp_json).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"param qa_salary_after_3.5_years check\", function () {\r",
							"    pm.expect(resp_json).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// Проверить, что json response имеет параметр person\r",
							"pm.test(\"param person check\", function () {\r",
							"    pm.expect(resp_json).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"start_qa_salary равен salary из request\", function () {\r",
							"    pm.expect(resp_json.start_qa_salary).to.eql(1*req_json.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_6_months равен salary*2 из request\", function () {\r",
							"    pm.expect(resp_json.qa_salary_after_6_months).to.eql(2*req_json.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_12_months равен salary*2.7 из request\", function () {\r",
							"    pm.expect(resp_json.qa_salary_after_12_months).to.eql(2.7*req_json.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year равен salary*3.3 из request\", function () {\r",
							"    pm.expect(resp_json[\"qa_salary_after_1.5_year\"]).to.eql(3.3*req_json.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years равен salary*3.8 из request\", function () {\r",
							"    pm.expect(resp_json[\"qa_salary_after_3.5_years\"]).to.eql(3.8*req_json.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"1-й элемент из u_name равен salary из request\", function () {\r",
							"    pm.expect(resp_json.person.u_name[1]).to.eql(1*req_json.salary);\r",
							"});\r",
							"\r",
							"// Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"u_age равен age из request\", function () {\r",
							"    pm.expect(resp_json.person.u_age).to.eql(1*req_json.age);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"u_salary_5_years равен salary*4.2 из request\", function () {\r",
							"    pm.expect(resp_json.person.u_salary_5_years).to.eql(4.2*req_json.salary);\r",
							"});\r",
							"\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for(let item in resp_json.person) {\r",
							"    console.log(\"цикл\", resp_json.person[item])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary_2}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age_2}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name_2}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name_2}}",
							"disabled": true
						},
						{
							"key": "age",
							"value": "{{age_2}}",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "{{salary_2}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}