4. Создать внешний репозиторий c названием JSON.
5. Клонировать репозиторий JSON на локальный компьютер.== git clone https://github.com/Navylead/JSON.git
6. Внутри локального JSON создать файл “new.json”.
7. Добавить файл под гит. == git add new.json
8. Закоммитить файл. == git commit -m "one file added"
9. Отправить файл на внешний GitHub репозиторий. == git push
10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON. == 
{
"ФИО":"Дышаев Кирилл Вячеславович"

,"Возраст":32
,	
"Питомцы":"кошка",
"Желаемая зарплата":"$1000"
}
11. Отправить изменения на внешний репозиторий. == git add new.json && git commit -m "HM2" && git push
12. Создать файл preferences.json
13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON. ==

{
"Любимый фильм":"Начало",

"Любимый сериал":"Во все тяжкие",
	
"Любимая еда":"Бифштекс",
	
"Любимое время года":"Весна"
,	
"Страна, которую хотели бы посетить":"Австралия"
}

14. Создать файл sklls.json добавить информацию о скиллах, которые будут изучены на курсе в формате JSON

{
"1 скилл":"Командная строка (terminal) Linux",
"2 скилл":"Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join)",
"3 скилл":"Нагрузочное тестирование в Jmeter",
"4 скилл":"Тестирование API через Postman (JS, автотесты API)"
}

15. Отправить сразу 2 файла на внешний репозиторий. == git add preferences.json sklls.json && git commit "2 files added" && git push
16. На веб интерфейсе создать файл bug_report.json.
17. Сделать Commit changes (сохранить) изменения на веб интерфейсе. == "Commit changes"
18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON. == "Edit this file"
{
"ID":"id_1",
	"Description":"Menu icon isn't displayed in header",
	"STR":{
		"step 1":"open url",
		"step 2":"scroll page down",
		"step 3":"scroll page up to header"
	},
	"Expected result":"Page is loaded. Menu icon is displayed in header",
	"Actual result":"Page is loaded. Menu icon is not displayed in header"
}
19. Сделать Commit changes (сохранить) изменения на веб интерфейсе. == "Commit changes"
20. Синхронизировать внешний и локальный репозиторий JSON == git pull

21. Создать внешний репозиторий c названием XML.
22. Клонировать репозиторий XML на локальный компьютер. == git clone https://github.com/Navylead/XML.git
23. Внутри локального XML создать файл “new.xml”.
24. Добавить файл под гит. == git add new.xml
25. Закоммитить файл. == git commit -m "1 file added"
26. Отправить файл на внешний GitHub репозиторий. == git push



27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML. ==

<?xml version="1.0" encoding="utf-8"?>
<root>
<name>Дышаев Кирилл Вячеславович</name>
<age>32</age>
<pets>кошка</pets>
<salary>$1000</salary>
</root>

28. Отправить изменения на внешний репозиторий. == git add new.xml && git commit -m "1 file fixed" && git push
29. Создать файл preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML. ==

<?xml version="1.0" encoding="utf-8"?>
<root>
<Любимый_фильм>Начало</Любимый_фильм>
<Любимый_сериал>Во все тяжкие</Любимый_сериал>
<Любимая_еда>Бифштекс</Любимая_еда>
<Любимое_время_года>Весна</Любимое_время_года>
<Страна_которую_хотели_бы_посетить>Австралия</Страна_которую_хотели_бы_посетить>
</root>

31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML ==

<?xml version="1.0" encoding="utf-8"?>
<skills>
<skill1>Командная строка (terminal) Linux</skill1>
<skill2>Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join)</skill2>
<skill3>Нагрузочное тестирование в Jmeter</skill3>
<skill4>Тестирование API через Postman (JS, автотесты API)</skill4>
</skills>

32. Сделать коммит в одну строку. == git add preferences.xml skills.xml && git commit -m "2 files added"
33. Отправить сразу 2 файла на внешний репозиторий. == git push
34. На веб интерфейсе создать файл bug_report.xml. == Create new file bug_report.xml
35. Сделать Commit changes (сохранить) изменения на веб интерфейсе. == Commit changes
36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML. ==

<bugreport>
  
<id>id 1</id>
  
<description>Menu icon isn't displayed in header</description>
  
<str>
    
<step1>open url</step1>
    
<step2>scroll page down</step2>
    
<step3>scroll page up to header</step3>
  
</str>
  
<er>Page is loaded. Menu icon is displayed in header</er>
  
<ar>Page is loaded. Menu icon is not displayed in header</ar>
  
</bugreport>


37. Сделать Commit changes (сохранить) изменения на веб интерфейсе. 
38. Синхронизировать внешний и локальный репозиторий XML == git pull

1. Создать внешний репозиторий c названием TXT.
2. Клонировать репозиторий TXT на локальный компьютер. == git clone https://github.com/Navylead/TXT.git
3. Внутри локального TXT создать файл “new.txt”.
4. Добавить файл под гит. == git add new.txt
5. Закоммитить файл. == commit -m "1 file added"
6. Отправить файл на внешний GitHub репозиторий. == git push
7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT. == 

Дышаев Кирилл Вячеславович, 32 года. Есть кошка. Хотел бы получать зарплату в размере $1000.

8. Отправить изменения на внешний репозиторий. == git add new.txt && git commit -m "file fixed" && git push



9. Создать файл preferences.txt
10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.

Любимый фильм - Начало. Любимый сериал - Во все тяжкие. Любимая еда - бифштекс. Любимое время года - весна. Страна, которую хотели бы посетить - Австралия.

11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT

1. Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC.
2. Что такое клиент-серверная архитектура.
3. HTTP Методы запросов на сервер.
4. Коды ответов HTTP сервера.
5. Структуры HTTP запросов и ответов.
6. Что такое JSON, XML. Их структура.
7. Тестирование API через Postman (JS, автотесты API).
8. Снятие и чтение логов c внешнего сервера.
9. Снифинг http web трафика через Charles и Fiddler.
10. Dev Tools веб браузеров (Google Chrome, FireFox).
11. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)
12. Мобильное тестирование.
13. Особенность iOS, Android, гайдлайны.
14. Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят)
15. Сборка Android приложений на Android Studio.
16. ADB (управление андройд девайсами).
17. Настройка прокси и vpn на iOS и Android.
18. Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.
19. Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)
20. Основы bash скриптинг, автоматизация рутинных задач на сервере.
21. Доступ к удалённым серверам.
22. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).
23. База данных Postgres (установка, настройка и использование).
24. Нереляционная база данных Redis (установка, настройка и использование).
25. Нагрузочное тестирование в Jmeter.
26. Методология разработки Scrum.
27. Python. (Изучение основ. Создание клиент серверного приложения)


12. Сделать коммит в одну строку. == git add preferences.txt skills.txt && git commit -m "2 files added"
13. Отправить сразу 2 файла на внешний репозиторий. == git push
14. На веб интерфейсе создать файл bug_report.txt.
15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.

ID - id1

Description - Menu icon isn't displayed in header

STR:

1. Open url

2. Scroll page down

3. Scroll page up to header

Expected result - Page is loaded. Menu icon is displayed in header

Actual result - Page is loaded. Menu icon is not displayed in header


17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
18. Синхронизировать внешний и локальный репозиторий TXT == git pull
